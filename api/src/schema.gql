# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Exercise {
  id: Int!
  day: LocalDate!
  start: LocalTime!
  end: LocalTime!
  group: Group!
}

"""
A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
"""
scalar LocalDate

"""
A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.
"""
scalar LocalTime

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  imgSrc: String!
  roles: [Role!]!
}

"""User role"""
enum Role {
  USER
  TRAINEE
  COACH
  ADMIN
}

type Trainee {
  id: Int!
  user: User!
  age: Int!
  parentName: String!
  parentPhone: PhoneNumber!
  parentEmail: EmailAddress!
  feedback: String!
  group: Group!
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Group {
  id: Int!
  name: String!
  limit: Int!
  exercises: [Exercise!]
  trainees: [Trainee!]
  coach: Coach!
}

type Coach {
  id: Int!
  groups: [Group!]
  user: User!
}

type City {
  id: Int!
  name: String!
  room: String!
  citySrc: String!
  roomSrc: String!
  coach: Coach!
}

type ChangeProfilePicResponse {
  token: String!
  user: User!
}

type CreateGroupResponse {
  msg: String!
}

type EditGroupResponse {
  msg: String!
}

type DeleteGroupResponse {
  msg: String!
}

type ChangeEmailResponse {
  token: String!
  user: User!
}

type LoginResponse {
  token: String!
  user: User!
}

type RegisterResponse {
  token: String!
  user: User!
}

type ChangePasswordResponse {
  token: String!
  user: User!
}

type CreateExerciseResponse {
  msg: String!
}

type DeleteExerciseResponse {
  msg: String!
}

type EditExerciseResponse {
  msg: String!
}

type CreateTraineeResponse {
  token: String!
  user: User!
}

type Query {
  cities: [City!]!
  getCoach(id: Int!): Coach!
  users: [User!]!
  findOne(email: String!): User!
  groups: [Group!]!
  exercises: [Exercise!]!
  trainees: [Trainee!]!
  getTrainee(id: Int!): Trainee!
}

type Mutation {
  createCity(createCityInput: CreateCityInput!): City!
  deleteCity(id: Int!): City!
  createCoach(createCoachInput: CreateCoachInput!): Coach!
  createUser(createUserInput: CreateUserInput!): User!
  changeProfilePic(changeProfilePicInput: ChangeProfilePicInput!): ChangeProfilePicResponse!
  createGroup(createGroupInput: CreateGroupInput!): CreateGroupResponse!
  editGroup(editGroupInput: EditGroupInput!): EditGroupResponse!
  deleteGroup(id: Int!): DeleteGroupResponse!
  registerUser(registerUserInput: RegisterUserInput!): RegisterResponse!
  loginUser(loginUserInput: LoginUserInput!): LoginResponse!
  changeEmail(changeEmailInput: ChangeEmailInput!): ChangeEmailResponse!
  changePassword(changePasswordInput: ChangePasswordInput!): ChangePasswordResponse!
  createExercise(createExerciseInput: CreateExerciseInput!): CreateExerciseResponse!
  editExercise(editExerciseInput: EditExerciseInput!): EditExerciseResponse!
  deleteExercise(id: Int!): DeleteExerciseResponse!
  createTrainee(createTraineeInput: CreateTraineeInput!): CreateTraineeResponse!
}

input CreateCityInput {
  name: String!
  room: String!
  citySrc: String!
  roomSrc: String!
  coachId: Int!
}

input CreateCoachInput {
  userId: Int!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: EmailAddress!
  password: String!
  roles: [Role!]
}

input ChangeProfilePicInput {
  userId: Int!
  image: Upload!
}

"""File upload scalar type"""
scalar Upload

input CreateGroupInput {
  name: String!
  coachId: Int!
  limit: Int!
}

input EditGroupInput {
  groupId: Int!
  name: String!
  limit: Int!
}

input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  roles: [Role!]
}

input LoginUserInput {
  email: String!
  password: String!
}

input ChangeEmailInput {
  id: Int!
  email: EmailAddress!
}

input ChangePasswordInput {
  id: Int!
  oldPassword: String!
  newPassword: String!
}

input CreateExerciseInput {
  day: LocalDate!
  start: LocalTime!
  end: LocalTime!
  groupId: Int!
}

input EditExerciseInput {
  exerciseId: Int!
  day: LocalDate!
  start: LocalTime!
  end: LocalTime!
}

input CreateTraineeInput {
  userId: Int!
  groupId: Int!
  age: Int!
  parentName: String!
  parentPhone: PhoneNumber!
  parentEmail: EmailAddress!
  feedback: String!
}